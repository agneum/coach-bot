// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type eventTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *eventTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("event").
func (v *eventTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *eventTableType) Columns() []string {
	return []string{
		"id",
		"title",
		"description",
		"type",
		"note",
		"coach_id",
		"place_id",
		"start_date",
		"duration",
		"created_at",
		"updated_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *eventTableType) NewStruct() reform.Struct {
	return new(Event)
}

// NewRecord makes a new record for that table.
func (v *eventTableType) NewRecord() reform.Record {
	return new(Event)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *eventTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// EventTable represents event view or table in SQL database.
var EventTable = &eventTableType{
	s: parse.StructInfo{
		Type:    "Event",
		SQLName: "event",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "int64", Column: "id"},
			{Name: "Title", Type: "string", Column: "title"},
			{Name: "Description", Type: "string", Column: "description"},
			{Name: "Type", Type: "string", Column: "type"},
			{Name: "Note", Type: "string", Column: "note"},
			{Name: "CoachID", Type: "int64", Column: "coach_id"},
			{Name: "PlaceID", Type: "int64", Column: "place_id"},
			{Name: "StartDate", Type: "time.Time", Column: "start_date"},
			{Name: "Duration", Type: "string", Column: "duration"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
		},
		PKFieldIndex: 0,
	},
	z: new(Event).Values(),
}

// String returns a string representation of this struct or record.
func (s Event) String() string {
	res := make([]string, 11)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Title: " + reform.Inspect(s.Title, true)
	res[2] = "Description: " + reform.Inspect(s.Description, true)
	res[3] = "Type: " + reform.Inspect(s.Type, true)
	res[4] = "Note: " + reform.Inspect(s.Note, true)
	res[5] = "CoachID: " + reform.Inspect(s.CoachID, true)
	res[6] = "PlaceID: " + reform.Inspect(s.PlaceID, true)
	res[7] = "StartDate: " + reform.Inspect(s.StartDate, true)
	res[8] = "Duration: " + reform.Inspect(s.Duration, true)
	res[9] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[10] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Event) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Title,
		s.Description,
		s.Type,
		s.Note,
		s.CoachID,
		s.PlaceID,
		s.StartDate,
		s.Duration,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Event) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Title,
		&s.Description,
		&s.Type,
		&s.Note,
		&s.CoachID,
		&s.PlaceID,
		&s.StartDate,
		&s.Duration,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *Event) View() reform.View {
	return EventTable
}

// Table returns Table object for that record.
func (s *Event) Table() reform.Table {
	return EventTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Event) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Event) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Event) HasPK() bool {
	return s.ID != EventTable.z[EventTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *Event) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = EventTable
	_ reform.Struct = (*Event)(nil)
	_ reform.Table  = EventTable
	_ reform.Record = (*Event)(nil)
	_ fmt.Stringer  = (*Event)(nil)
)

func init() {
	parse.AssertUpToDate(&EventTable.s, new(Event))
}
